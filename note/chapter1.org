* 第一章-RDBMS基础

** 数据库对象概述
- SQLServer中有一下重要对象
  - 数据库
  - 事务日志
  - 索引
  - 文件组
  - 数据库关系图
  - 视图
  - 存储过程
  - 用户自定义函数
  - 用户
  - 角色
  - 程序集
  - 表
  - 报表
  - 全文目录
  - 用户自定义数据类型

*** 数据库对象
- 在SQL Server中,大部分对象(不是所有)为数据库对象的子对象.

- SQL Server第一次启动至少包括四个数据库对象
  - master
  - model
  - msdb
  - tempdb

- master数据库保存一组特殊的表(系统表)用于系统的总体控制.
  - 所有扩展的存储过程和系统存储过程都存储在master数据库中,而不论该存储过程是使用于哪一个数据库.
  - 可以测试 ~sys.objects~ 表,确认是否存在对应数据库表对象的记录项.

- model数据库是指可以基于该模型得到一个副本. model数据库构成任何新建数据库的模板.
  - 改变新建数据库的样式, 则可以根据需要更改model数据库.
  - 任意新建的数据库至少要比model数据库大.

- msdb数据库是SQL Agent进程存储任意系统任务的地方.
  - 如果每次执行任务时调度存储过程, 则在msdb数据库中会有一个记录项.

- tempdb数据库是服务器的主要工作区域之一.
  - 在执行一个复杂或者大型的查询操作时, SQL Server 可能需要创建一些中间表来完成, 而这是在 tempdb 数据库中进行的.
  - tempdb数据库中的对象是临时的,tempdb本身也是临时的.
  - tempdb数据库是系统中唯一完全重建的数据库.


*** 索引
- 索引是仅在特定表或视图架构内存在的对象. 
  - 索引中有以某一特定方式排序的查找(或键)值,使用索引是快速查找数据库中实际信息的一种方法.
  - 索引分为两类
    - 群集索引: 每个表只能有一个群集索. 群集索引对应的表按照其索引进行物理排序. 其含义与百科全书的全书页码一样.
    - 非群集索引: 每个表可以有多个非群集索引. 非群集索引的含义与百科全书的关键字目录类似.
- 索引的视图(索引视图)必须在有非群集索引之前至少有一个群集索引.


*** 触发器
- 触发器是存在于表架构内的对象. 触发器是在表操作时(如插入,更新或删除等)自动执行的一段逻辑代码.


*** 约束
- 约束是仅限于表中存在的另一对象.约束就是限制表中数据满足某种条件.


*** 数据库关系图
- 数据库被分成两部分: 实体和关系.(ERD-实体关系图)

*** 视图
- 视图是一种虚拟表, 除了视图不包含本身的任意数据外, 视图的使用基本与表的使用类似.
- 视图仅仅是存储在表中的数据的一个预先计划的映射和表示.
- 视图以查询的形式存储在数据库中. 目的是控制用户所要显示的数据.
- 索引视图可以创建索引, 其他都与视图相同.

  
*** 存储过程
- 存储过程是SQL Server编程功能的基础.
- 存储过程通常是组成一个逻辑单元的 ~Transact-SQL~ (用于Microsoft SQL Server数据库查询的语言) 语句的有序集合.
- 存储过程允许使用变量和参数, 也可以使用选择和循环结构.
- 与单条SQL语句相比, 存储过程有以下优点:
  - 不适用长字符串文本而使用短存储过程名, 可减少存储过程中的运行代码所要的网络信息流量.
  - 预先优化和预编译, 节省存储过程每次运行的时间.
  - 通常考虑安全原因, 或仅仅是隐藏数据库的复杂性, 将过程封装.
  - 可从其他存储过程调用, 使得它们在某些限定意义上重用.


*** 用户自定义函数
- 用户自定义函数与存储过程的不同点:
  - 返回值的数据类型包括大部分SQL Server数据类型. 不包括的返回值类型由: text, ntext, image, cursor 和 timestamp.
  - 没有"副作用". 基本上, 用户自定义函数不能越权.(更改表, 发送电子邮件或更改系统或数据库参数)

    
*** 用户与角色
- SQL Server中可以直接赋予用户或角色某种操作的权限, 一个用户或多个用户可同属于一个角色.


*** 规则
- 规则和约束都是限制插入到表中的数据类型的信息.
- 规则不限于特定表, 它们是独立对象, 可绑定到多个表, 或者甚至绑定到特定数据类型.


** SQL Server数据类型
| 数据类型名称         | 类别             | 长度(字节为单位) | 数据特点                                                                                                                                                   |
|----------------------+------------------+------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Bit                  | 整型             | 1                | 表中第一个Bit数据类型占1个字节, 其余7个位也用作Bit数据类型. 允许空格使其占用一个额外字节                                                                   |
| Bigint               | 整型             | 8                | 取值范围为 -2^63~2^63-1                                                                                                                                    |
| Int                  | 整型             | 4                | 取值范围是 -2^32~2^32-1                                                                                                                                    |
| SamllInt             | 整型             | 2                | 取值范围是 -2^16~2^16-1                                                                                                                                    |
| TinyInt              | 整型             | 1                | 取值范围是 0~255                                                                                                                                           |
| Decimal/Numeric      | 数字型           | 可变             | 固定精度, 取值范围为 -10^38-1~10^38-1.两者含义相同                                                                                                         |
| Money                | 货币             | 8                | 货币单位,取值范围为 -2^63~2^63, 精确到4个小数位. 注意货币单位可以是任意货币                                                                                |
| SmallMoney           | 货币             | 4                | 货币单位, 取值范围为 -2^32~2^32                                                                                                                            |
| Float(Real)          | 近似小数         | 可变             | 由以参数(如Float(20))决定其长度与精度.注意参数值表示位数,不是字节数.取值范围为-1.79E+308~1.79E+308                                                         |
| DateTime             | 日期/时间        | 8                | 日期与时间,取值范围为1753年1月1日~9999年12月31日,精确到0.03秒                                                                                              |
| DateTime2            | 日期/时间        | 可变(6~8)        | 新扩展的DateTime典型数据类型.支持更大的日期范围和更高的时间部分精度(精确到100纳秒).和DateeTime一样,它包含失去信息,但与.NET DateeTime数据类型相对应         |
| SmallDateTime        | 日期/时间        | 4                | 日期与时间,取值范围为1900年1月1日~2079年6月6日,精确到分钟.                                                                                                 |
| Date                 | 日期/时间        | 3                | 只存储Gregorian日历定义的0001年1月1日~9999年12月31日的日期数据,采用ANSI标准日期格式(YYYY-MM-DD),但会从其他一些格式隐式转换                                 |
| Time                 | 日期/时间        | 可变(3~5)        | 只存储用户可选的精度为纳秒(默认)的时间数据.                                                                                                                |
| Cursor               | 特殊小数         | 1                | 指向游标的指针,只占用一个字节,记住组成实际油表的结果集也占用内存,占用内存的大小取决于结果集.                                                               |
| TimeStamp/rowversion | 特殊小数(二进制) | 8                | 给定数据库的唯一特定值,即使UPDATE语句没有timestamp列(时间标记),但其值在插入或更新记录的时间自动由数据库设定(不允许直接更新timestamp字段)                   |
| UniqueIdentifier     | 特殊小数(二进制) | 16               | 特殊的全局唯一标识符(GUID),必须保证在内存和时间内的唯一.                                                                                                   |
| Char                 | 字符             | 可变             | 定长字符数据.比设定长度短时使用空格填充,非Unicode数据,最大长度为8000字符.                                                                                  |
| VarChar              | 字符             | 可变             | 长度可变的字符数据.比设定长度短时不使用空格填充,为非Unicode数据.允许最大长度为8000字符,使用max关键字(VarChar(max))表示其长度可足够大(数据长度可达2^31字节) |
| Text                 | 字符             | 可变             | 从SQL Server2005开始支持向后兼容.可使用varchar(max)代替                                                                                                    |
| NChar                | Unicode          | 可变             | 定长Unicode字符数据.比设定长度短时使用空格填充.最大长度为4000字符.                                                                                         |
| NVarChar             | Unicode          | 可变             | 可变长度的Unicode字符数据.比设定长度短时不使用空格填充,允许最大长度为4000字符,使用max关键字(NVarChar(max))表示其长度可足够大(数据长度可达2^31字节)         |
| Ntext                | Unicode          | 可变             | 可变长度的Unicode字符数据.类似Text类型,仅用作向后兼容,可使用nvarchar(max)代替.                                                                             |
| VarBinary            | 二进制           | 可变             | 可变长度二进制数,最大特定长度为8000字节,可使用max关键字使其作为LOB(大对象)字段(数据长可达2^31字节)                                                         |
| Image                | 二进制           | 可变             | 从SQL Server 2005 开始支持向后兼容,可使用varbinary(max)代替.                                                                                               |
| Table                | 其他             | 特殊             | 主要用于结果集,通常作为用户自定义函数(UDF)的结果输出或作为存储过程的参数.在表的定义中不作为可用的数据类型.                                                 |
| HierarchyID          | 其他             | 特殊             | 维护层次结构位置信息的特殊数据类型.提供特定于层次结构需要的特殊功能.允许作深度, 父/子关系和索引比较.实际尺寸随层次结构中的节点数和平衡深度而变化           |
| Sql_variant          | 其他             | 特殊             | 用于保存大多数其他SQL Server数据类型的容器.当列或函数需要处理多种数据类型时可使用这种数据类型.                                                             |
| XML                  | 字符             | 可变             | 定义一个字符字段用作XML数据.用于针对XML模式的数据校验和使用特殊而面向XML的函数.                                                                            |
| CLR                  | 其他             | 可变             | 随CLR对象的特性而变,CLR对象支持基于自定义数据类型的CLR.                                                                                                                      |

[[file:./img/pic1.png]]
